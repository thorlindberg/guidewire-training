Keyword;Description
Class-based validation;Used on-demand, allowing users to choose time for validating data object, decide how to validate, and write complex valication logic as Gosu classes.
Validation scope;Class-based validation can be performed on policy-related objects such as PolicyContactRole, PolicyLocation, PolicyPeriod, LOB entities, and Policy-specifies entities. Everything in policy graph can be validated.
Validation levels;Validation restrictions decrease as priority value increases. Validation can be run at certain level on entity or wizard step. Check for validation pass and which level is currently being tested.
Validation interfaces and classes;PolicyCenter provides in the gw.validation package a PCValidation interface, PCValidationBase convenience class, PCValidationContext initialization class creating the PCValidationResult containing methods for generating warnings and errors.
Validation classes in base configuration;Classes shared across LOB are PolicyPeriodValidation, PolicyLineValdiation, PolicyLocationValidation, PolicyContactRoleValidation. LOB-specific class examples are BALineValidation and BusinessVehicleValidation.
PCValidation implementation;Validation classes must implement PCValidation or extend its classes. Entity validation classes extend PCValidationBase. PolicyLine validation classex extend PolicyLineValidation. Validation classes have a validateImpl() or doValidate() method.
PCValidationContext;Defined by the constructor of PCValidationBase. Context takes ValidationLevel for performing validation, and creates PCValidationResult for storing results (warnings and errors).
PCValidationContext methods;isAtLeast(valLevel) tests ValidationLevel, addToVisited(validation, methodName) traces validation logic, hasVisited(className, methodName) indicates if validation object and method in combination have been seen before, and showVisited() produces string of validation methods visited during validation.
PCValidationResult;Created by context methods. Class provides method for holding resulting warnings and errors.
PCValidationResult methods;addError(object, strRelativeFieldPath, valLevel, errorMessage, wizardStepId), addFieldError(object, strRelativeFieldPath, valLevel, errorMessage, wizardStepId), addWarning(pbject, valLevel, warningMessage, wizardStepId), addFieldWarning(object, strRelativeFieldPath, valLevel, warningMessage, wizardStepId), where valLevel means error or warning will be added at level or more restrictive level.
Validation chaining;Process of calling validation class from other validation class, adding an additional validation check, forming a chain of validatio checks.
Validation chain flow;Call validate() method which calls other methods -> Invoke validate() methodo n another validation class -> Classes chain to validations of entities they hold.
Validation class creation;New entities and LOBs require creation of new validation class, Existing entities can use existing validation class by adding validation check methods. New classes should extend PCValidationBase. Existing validation classes should be used as reference.
Add validation check;Add/edit appropriate vallidation class -> Add valication check method -> Call method from validateImpl() or doValidate() -> Invoke method -> Verify result in UI.
